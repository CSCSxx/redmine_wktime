api.array :wk_survey, api_meta(:total_count => @entry_count, :offset => @offset, :limit => @limit, unseen_count: @unseen_count) do
  @surveys.each do |entry|
  surveyLink = get_survey_with_userGroup(entry.id, false)
    api.entry do
      api.id entry.id
      api.name entry.name
      api.status_label getSurveyStatus.invert[entry.status]
      api.status entry.status
      api.group_id entry.group_id
      api.survey_for_type entry.survey_for_type
      api.survey_for_id entry.survey_for_id
      api.recur entry.recur
      api.recur_every entry.recur_every
      api.is_review entry.is_review
      api.show_result (entry.status == "O" && validateERPPermission("E_SUR")) || entry.status == "C" || getResponseGroup(entry.id).present?
      api.surveyLink surveyLink.present?

      api.array :questions do
        entry.wk_survey_questions.each do |question|
          api.question do
            api.id question.id
            api.name question.name
            api.question_type question.question_type
            api.is_reviewer_only question.is_reviewer_only
            api.is_mandatory question.is_mandatory
            api.not_in_report question.not_in_report

            api.array :choices do
              question.wk_survey_choices.each do |choice|
                api.choice do
                  api.id choice.id
                  api.name choice.name
                  api.points choice.points
                end
              end
            end
          end
        end
      end
    end
  end
end

api.headers do
  api.surveyFor_items getSurveyFor
  api.status_items getSurveyStatus.drop(1)
  api.userGroup_items getUserGroup
  api.questionType_items getQuestionType
end